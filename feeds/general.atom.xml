<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>pataliebre.net - general</title><link href="https://pataliebre.net/" rel="alternate"></link><link href="https://pataliebre.net/feeds/general.atom.xml" rel="self"></link><id>https://pataliebre.net/</id><updated>2014-05-27T00:00:00+02:00</updated><entry><title>Blog lowcost con GitHub y Pelican</title><link href="https://pataliebre.net/blog-lowcost-con-github-y-pelican.html" rel="alternate"></link><published>2014-05-27T00:00:00+02:00</published><updated>2014-05-27T00:00:00+02:00</updated><author><name>David Castellanos</name></author><id>tag:pataliebre.net,2014-05-27:/blog-lowcost-con-github-y-pelican.html</id><summary type="html">&lt;!--
Status: draft
--&gt;

&lt;p&gt;Gracias a &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; y un generador estático de contenido como &lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; es muy fácil montar un blog &lt;em&gt;lowcost&lt;/em&gt;. Un humilde ejemplo es este blog, pero hasta hace poco no había conseguido una configuración que mereciera la pena compartir.&lt;/p&gt;
&lt;h3&gt;GitHub Pages&lt;/h3&gt;
&lt;p&gt;En general, el comportamiento de GitHub Pages es muy …&lt;/p&gt;</summary><content type="html">&lt;!--
Status: draft
--&gt;

&lt;p&gt;Gracias a &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; y un generador estático de contenido como &lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; es muy fácil montar un blog &lt;em&gt;lowcost&lt;/em&gt;. Un humilde ejemplo es este blog, pero hasta hace poco no había conseguido una configuración que mereciera la pena compartir.&lt;/p&gt;
&lt;h3&gt;GitHub Pages&lt;/h3&gt;
&lt;p&gt;En general, el comportamiento de GitHub Pages es muy sencillo. Prácticamente consiste en crear un repositorio &lt;code&gt;git&lt;/code&gt;, realizar un commit con documentos HTML, y unos minutos después este contenido será accesible en una URL.&lt;/p&gt;
&lt;p&gt;GitHub Pages ofrece dos modalidades de servicio: páginas para desarrolladores u organizaciones, y páginas para proyectos. Dependiendo de la modalidad que estemos usando varía la forma en la que se monta el sitio:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;En la modalidad para desarrolladores u organizaciones, se debe crear un repositorio llamado &lt;em&gt;usuario&lt;/em&gt;.github.io, donde &lt;em&gt;usuario&lt;/em&gt; es el nombre del usuario o de la organización en GitHub. La página (o páginas) HTML que se deseen servir se deben añadir directamente en la rama &lt;code&gt;master&lt;/code&gt;, y no importa lo que haya en el resto de ramas. Este contenido es accesible desde la URL &lt;strong&gt;http://&lt;em&gt;usuario&lt;/em&gt;.github.io&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;En la modalidad para proyectos, no es necesario crear nuevos repositorios. En el repositorio del proyecto se debe crear una rama llamada &lt;code&gt;gh-pages&lt;/code&gt;, y añadir ahí el contenido HTML. Este contenido será accesible desde la URL &lt;strong&gt;http://&lt;em&gt;usuario&lt;/em&gt;.github.io/&lt;em&gt;repository&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aunque puede parecer un lío la gestión de estas ramas, afortunadamente existe una herramienta llamada &lt;a href="https://github.com/davisp/ghp-import/"&gt;ghp-import&lt;/a&gt; que facilita en gran manera estas operaciones.&lt;/p&gt;
&lt;h3&gt;Pelican&lt;/h3&gt;
&lt;p&gt;Pelican es un generador estático de contenido, al estilo de &lt;a href="http://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;. Por si fuera necesario, en &lt;a href="http://staticsitegenerators.net/"&gt;Static Site Generators&lt;/a&gt; hay una recopilación de proyectos similares.&lt;/p&gt;
&lt;p&gt;Además de la &lt;a href="http://docs.getpelican.com"&gt;documentación&lt;/a&gt; del proyecto, hay multitud de páginas con instrucciones para configurar Pelican (por ejemplo &lt;a href="http://www.circuidipity.com/github-pages.html"&gt;aquí&lt;/a&gt; y &lt;a href="http://mathamy.com/migrating-to-github-pages-using-pelican.html"&gt;aquí&lt;/a&gt;). Además el comando &lt;code&gt;pelican-quickstart&lt;/code&gt; es de ayuda para crear rápidamente una configuración básica de un blog.&lt;/p&gt;
&lt;h3&gt;Usar Pelican en GitHub Pages para desarrolladores&lt;/h3&gt;
&lt;p&gt;En mi caso, elegí utilizar GitHub Pages en su modalidad para desarrolladores. Para ello, hice lo siguiente:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Crear un repositorio llamado &lt;a href="https://github.com/davidcaste/davidcaste.github.io"&gt;davidcaste.github.io&lt;/a&gt;, y clonarlo en mi ordenador:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone https://github.com/davidcaste/davidcaste.github.io&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;En el repositorio local, crear una rama llamada &lt;code&gt;source&lt;/code&gt;, y cambiar a ella:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git checkout -b source&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Crear una configuración básica con &lt;code&gt;pelican-quickstart&lt;/code&gt; y seguir las instrucciones.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Llegados a este punto, contamos con una configuración Pelican funcional. La &lt;a href="http://docs.getpelican.com/en/3.3.0/getting_started.html#basic-usage"&gt;documentación de Pelican&lt;/a&gt; nos explica (entre otras muchas cosas) cómo crear contenidos y generar el contenido estático a partir de ellos.&lt;/p&gt;
&lt;p&gt;Según la configuración por defecto, las páginas generadas se almacenarán en el directorio &lt;code&gt;output&lt;/code&gt;. Este directorio &lt;strong&gt;no&lt;/strong&gt; es necesario añadirlo al repositorio, y lo ideal es añadir las siguientes líneas al fichero &lt;code&gt;.gitignore&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;output&lt;/span&gt;
&lt;span class="err"&gt;pelican.pid&lt;/span&gt;
&lt;span class="err"&gt;srv.pid&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como se comentó anteriormente, GitHub Pages para desarrolladores va a servir el contenido HTML que se encuentre en la rama &lt;code&gt;master&lt;/code&gt; del repositorio. Podríamos copiar el contenido del directorio &lt;code&gt;ouput&lt;/code&gt; a algún sitio, cambiar a la rama &lt;code&gt;master&lt;/code&gt; y añadir el contenido anteriores. Es factible, pero sin duda que es un procedimiento muy tedioso.&lt;/p&gt;
&lt;p&gt;El script &lt;code&gt;ghp-import&lt;/code&gt; nos permite evitar los pasos anteriores. Con ejecutar &lt;code&gt;ghp-import -b master output&lt;/code&gt; él sólo va a realizar un commit en &lt;code&gt;master&lt;/code&gt; con los contenidos del directorio &lt;code&gt;output&lt;/code&gt;. Sólo nos quedaría subir los cambios de vuelta a GitHub con el comando &lt;code&gt;git push origin master&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;El proceso se puede automatizar aún más modificando el fichero &lt;code&gt;Makefile&lt;/code&gt; que genera &lt;code&gt;pelican-quickstart&lt;/code&gt;; en lugar de que el objetivo &lt;code&gt;github&lt;/code&gt; invoque a &lt;code&gt;ghp-import&lt;/code&gt; sobre la rama &lt;code&gt;gh-pages&lt;/code&gt;, nos interesa que se invoque sobre la rama &lt;code&gt;master&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;publish&lt;/span&gt;
    &lt;span class="n"&gt;ghp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OUTPUTDIR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Conclusiones&lt;/h3&gt;
&lt;p&gt;La tupla GitHub Pages y un generador estático de contenido como Pelican permiten crear fácilmente páginas y blogs que requieren un esfuerzo de mantenimiento cercano a cero. Pelican en particular ofrece una serie de scripts y facilidades que automatizan las operaciones más tediosas.&lt;/p&gt;
&lt;p&gt;En definitiva, la posibilidad de poder usar las mismas herramientas que las usadas durante el desarrollo de software, hacen de GitHub Pages junto con Pelican ofrece una alternativa muy a tener en cuenta con respecto a otras plataformas de blogs tradicionales como &lt;a href="http://es.wordpress.com/"&gt;WordPress&lt;/a&gt; o &lt;a href="https://www.blogger.com"&gt;Blogger&lt;/a&gt;.&lt;/p&gt;</content><category term="general"></category><category term="github"></category><category term="python"></category><category term="pelican"></category></entry><entry><title>Oracle JDK y Google Chrome en Ubuntu 12.04 LTS</title><link href="https://pataliebre.net/oracle-jdk-y-google-chrome-en-ubuntu-1204-lts.html" rel="alternate"></link><published>2012-04-30T00:00:00+02:00</published><updated>2012-04-30T00:00:00+02:00</updated><author><name>David Castellanos</name></author><id>tag:pataliebre.net,2012-04-30:/oracle-jdk-y-google-chrome-en-ubuntu-1204-lts.html</id><summary type="html">&lt;p&gt;A menudo utilizo &lt;em&gt;Juniper Network Connect&lt;/em&gt; para conectar a la intranet
corporativa del trabajo. Es un applet de Java que, al menos en mi caso, no
funciona bien con &lt;a href="http://openjdk.java.net"&gt;OpenJDK&lt;/a&gt; y sólo funciona con &lt;a href="http://www.java.com"&gt;Oracle JVM&lt;/a&gt; (la
anteriormente conocida como Sun JVM). En agosto del 2011, &lt;a href="https://lists.ubuntu.com/archives/ubuntu-security-announce/2011-December/001528.html"&gt;Canonical dejó de
tener …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;A menudo utilizo &lt;em&gt;Juniper Network Connect&lt;/em&gt; para conectar a la intranet
corporativa del trabajo. Es un applet de Java que, al menos en mi caso, no
funciona bien con &lt;a href="http://openjdk.java.net"&gt;OpenJDK&lt;/a&gt; y sólo funciona con &lt;a href="http://www.java.com"&gt;Oracle JVM&lt;/a&gt; (la
anteriormente conocida como Sun JVM). En agosto del 2011, &lt;a href="https://lists.ubuntu.com/archives/ubuntu-security-announce/2011-December/001528.html"&gt;Canonical dejó de
tener permiso para distribuir la JVM de Sun&lt;/a&gt;. Aunque existen algunos PPAs
mantenidos por miembros de la comunidad de Ubuntu que ofrecen paquetes DEB del
Oracle JVM, suelen ser versiones demasiado antiguas y con problemas de
seguridad.&lt;/p&gt;
&lt;p&gt;Aunque hay disponible un instalador oficial en la &lt;a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html"&gt;sección de descargas de
Oracle para Java&lt;/a&gt;, suele ser mejor opción utilizar el script &lt;code&gt;make-jpkg&lt;/code&gt;
para crear un paquete Debian. Este script está empaquetado para Debian en el
paquete &lt;a href="http://packages.debian.org/java-package"&gt;java-package&lt;/a&gt;, y recientemente ha sido actualizado a la versión
0.50 que tiene como novedad el soporte para Java 7.&lt;/p&gt;
&lt;p&gt;Sólo he encontrado un problema con estos paquetes, y es que no instalan el
plugin de Java en el navegador Google Chrome, sin embargo si lo hace para
Iceweasel y Chromium. Es problema es muy sencillo de resolver, sólo es
necesario crear un enlace simbólico al fichero &lt;code&gt;libnpjp2.so&lt;/code&gt; que se encuentra
en el JRE. Utilizando el &lt;a href="http://www.debian-administration.org/articles/91"&gt;sistema de alternatives de Debian&lt;/a&gt; se haría de la
siguiente manera:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo update-alternatives --install \
&amp;gt; /usr/lib/mozilla/plugins/libjavaplugin.so \
&amp;gt; mozilla-javaplugin.so \
&amp;gt; /usr/lib/jvm/j2sdk1.6-oracle/jre/lib/i386/libnpjp2.so 100
&lt;/pre&gt;&lt;/div&gt;</content><category term="general"></category><category term="java"></category><category term="ubuntu"></category><category term="alternatives"></category></entry><entry><title>hello world!</title><link href="https://pataliebre.net/hello-world.html" rel="alternate"></link><published>2012-04-22T00:00:00+02:00</published><updated>2012-04-22T00:00:00+02:00</updated><author><name>David Castellanos</name></author><id>tag:pataliebre.net,2012-04-22:/hello-world.html</id><summary type="html">&lt;p&gt;Quizá sea por deformación profesional, vaguería, o una falta (puntual) de
imaginación, no se me ocurre una mejor forma de comenzar este lío que con un
estupendo &lt;em&gt;Hello World!&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;El objetivo de este blog es muy humilde: continuamente estoy aprendiendo cosas,
y continuamente estoy olvidando cosas. Y como soy vago …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Quizá sea por deformación profesional, vaguería, o una falta (puntual) de
imaginación, no se me ocurre una mejor forma de comenzar este lío que con un
estupendo &lt;em&gt;Hello World!&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;El objetivo de este blog es muy humilde: continuamente estoy aprendiendo cosas,
y continuamente estoy olvidando cosas. Y como soy vago, me fastidia sobremanera
tener que volver a aprenderlas. Normalmente cuando me quejo de todo esto me
suelen regañar con un  "deberías haberlo apuntado en algún sitio".&lt;/p&gt;
&lt;p&gt;Así que ya
tengo la motivación que necesitaba: voy a escribir sobre cosas de mi trabajo
que &lt;em&gt;sé&lt;/em&gt; que voy a olvidar y que muy posiblemente vaya a necesitar en un
futuro. Y si de paso resulta que es útil a alguien, perfecto. Imagino que la
mayoría de las entradas de este blog serán sobre computación y
programación en general, y sobre Python en particular. Entre mis intereses se
encuentran temas como el toolkit GTK, Eclipse (tanto el IDE como la
plataforma), Java, Android, Git, etc.&lt;/p&gt;</content><category term="general"></category><category term="me"></category></entry></feed>