<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>pataliebre.net</title><link>http://www.pataliebre.net/</link><description></description><atom:link href="http://www.pataliebre.net/feeds/david-castellanos.rss.xml" rel="self"></atom:link><lastBuildDate>Fri, 27 Jun 2014 00:00:00 +0200</lastBuildDate><item><title>Monitorizar una red privada desde un Nagios público con NRPE</title><link>http://www.pataliebre.net/monitorizar-una-red-privada-desde-un-nagios-publico-con-nrpe.html</link><description>&lt;p&gt;Hace apenas un par de semanas he cambiado de trabajo, y uno de los primeros problemas que he tenido que resolver estaba relacionado con &lt;a href="http://www.nagios.org/"&gt;Nagios&lt;/a&gt;. Ocurre que tenemos unas máquinas en una red privada, y un servidor Nagios corporativo que no puede acceder a ellas.&lt;/p&gt;
&lt;p&gt;Nagios es una herramienta de monitorización de redes y sistemas de código abierto. Es extremadamente popular, y desde su origen en 1999 se usa en multitud de sistemas. Por lo general se compone de un servidor que realiza tests y recopila sus resultados, &lt;a href="http://exchange.nagios.org/directory/Addons/Monitoring-Agents"&gt;agentes&lt;/a&gt; que tienen la capacidad de realizar tests, y de &lt;em&gt;plugins&lt;/em&gt;. Estos plugins son pequeños programas que se pueden utilizar para ejecutar pruebas locales, pruebas remotas, o para realizar tareas auxiliares que asistan a los dos usos anteriores.&lt;/p&gt;
&lt;p&gt;La principal característica de Nagios es la cantidad de recursos y plugins existenes. Algunos ejemplos de repositorios de plugins son &lt;a href="http://exchange.nagios.org"&gt;Nagios Exchange&lt;/a&gt;, &lt;a href="http://nagios-plugins.org/"&gt;Nagios Plugins&lt;/a&gt;, &lt;a href="https://www.monitoring-plugins.org/"&gt;The Monitoring Plugins Project&lt;/a&gt;, etc. El blog de &lt;a href="http://www.eldespistado.com/"&gt;El Despistado&lt;/a&gt; trata casi en exclusiva sobre Nagios y tiene publicados multitud de artículos de interés.&lt;/p&gt;
&lt;p&gt;En esta entrada voy a repasar la solución que hemos adoptado. El sistema operativo de los equipos que he utilizado es Ubuntu 12.04, aunque posiblemente la configuración del entorno sea exactamente la misma (o al menos muy parecida) en Ubuntu 14.04.&lt;/p&gt;
&lt;h3&gt;Problemática&lt;/h3&gt;
&lt;p&gt;El servidor Nagios (en adelante Nagios a secas) no es capaz de llegar a un conjunto de hosts que se encuentran en una red privada. Después de investigar, encontramos dos posibles soluciones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Realizar chequeos pasivos utilizando &lt;a href="http://exchange.nagios.org/directory/Addons/Passive-Checks/NSCA--2D-Nagios-Service-Check-Acceptor/details"&gt;NSCA&lt;/a&gt; (&lt;em&gt;Nagios Service Check Acceptor&lt;/em&gt;). La iniciativa de la comunicación la toman los hosts, y estos si que pueden llegar al Nagios porque salen a través de un NAT. Esta aproximación requiere la instalación de un servidor NSCA en el Nagios, y de un cliente NSCA en cada uno de los hosts.&lt;/li&gt;
&lt;li&gt;Utilizar &lt;a href="http://exchange.nagios.org/directory/Addons/Monitoring-Agents/NRPE--2D-Nagios-Remote-Plugin-Executor/details"&gt;NRPE&lt;/a&gt; (&lt;em&gt;Nagios Remote Plugin Executor&lt;/em&gt;) para montar un escenario muy parecido al descrito en &lt;a href="http://nagios.sourceforge.net/docs/3_0/indirectchecks.html"&gt;Multiple Indirected Service Checks&lt;/a&gt;. NRPE es un agente de Nagios que permite la monitorización mediante plugins que se encuentran instalados en los sistemas remotos. Se compone de un plugin NRPE que se debe instalar en el Nagios, y de un servidor NRPE en cada uno de los hosts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Como resulta que el Nagios es corporativo, y que ya tenían el plugin NRPE instalado, se eligió esta última opción.&lt;/p&gt;
&lt;h3&gt;Descripción del escenario&lt;/h3&gt;
&lt;p&gt;Nuestro escenario consiste básicamente en que hay un host que está detrás del firewall y que tiene acceso al resto de elementos que queremos monitorizar. El servidor Nagios se conecta a él, y éste a su vez se conectará al resto de elementos de la red:&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/indirectsvccheck2.png"&gt;&lt;img width="75%" src="/images/indirectsvccheck2.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tendremos por tanto los siguientes elementos:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Un &lt;em&gt;servidor&lt;/em&gt; en el que estará instalado Nagios, y el plugin de NRPE.&lt;/li&gt;
&lt;li&gt;Una &lt;em&gt;máquina de salto&lt;/em&gt; en la que estarán instalados el servidor NRPE, el plugin NRPE, y posiblemente otros plugins de Nagios.&lt;/li&gt;
&lt;li&gt;Un conjunto de &lt;em&gt;hosts&lt;/em&gt; a monitorizar, en los que se instalarán un servidor NRPE en cada uno de ellos, y un cojunto de plugins de Nagios.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Configuración de los hosts&lt;/h4&gt;
&lt;p&gt;En los hosts es necesario instalar el servidor NRPE:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install nagios-nrpe-server nagios-plugins
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Los comandos que van a ser invocados por el servidor NRPE se configuran en el archivo &lt;code&gt;/etc/nagios/nrpe.cfg&lt;/code&gt;, como por ejemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;command[check_users]=/usr/lib/nagios/plugins/check_users -w 5 -c 10
command[check_load]=/usr/lib/nagios/plugins/check_load -w 15,10,5 -c 30,25,20
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como medida de seguridad, se puede añadir la IP de la máquina de salto en la variable &lt;code&gt;allowed_hosts&lt;/code&gt; del archivo &lt;code&gt;/etc/nagios/nrpe.cfg&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;allowed_hosts=192.168.60.10
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La documentación de NRPE informa que esta opción se ignora si NPRE se ejecuta bajo &lt;code&gt;inetd&lt;/code&gt; o &lt;code&gt;xinetd&lt;/code&gt;, y que en los casos que se aplica las comprobaciones que realiza son bastante rudimentarias. Por estas razones es bastante común combinar esta variable con comprobaciones adicionales en los archivos &lt;code&gt;/etc/hosts.allow&lt;/code&gt; y &lt;code&gt;/etc/hosts.deny&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;No hay que olvidar reiniciar el servicio &lt;code&gt;nagios-nrpe-server&lt;/code&gt; después de modificar la configuración:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo service nagios-nrpe-server restart
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Configuración de la máquina de salto&lt;/h4&gt;
&lt;p&gt;En la máquina de salto se deben instalar el servidor NRPE y el plugin NRPE de Nagios:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install nagios-nrpe-server nagios-plugins
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hay que prestar atención a la hora de instalar el paquete &lt;code&gt;nagios-nrpe-plugin&lt;/code&gt; porque "recomienda" el paquete &lt;code&gt;nagios3&lt;/code&gt;, y en Ubuntu los paquetes recomendados se instalan automáticamente. Como no necesitamos instalar Nagios en la máquina de salto, le debemos pasar el flag &lt;code&gt;--no-install-recommends&lt;/code&gt; a &lt;code&gt;apt-get&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install --no-install-recommends nagios-nrpe-plugin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El paquete &lt;code&gt;nagios-nrpe-plugin&lt;/code&gt; proporciona el binario &lt;code&gt;check_nrpe&lt;/code&gt; en la ruta &lt;code&gt;/usr/lib/nagios/plugins&lt;/code&gt;. Este binario es en realidad un cliente que utilizaremos para ordenar la ejecución de tests en un host remoto que tenga instalado un servidor NRPE.&lt;/p&gt;
&lt;p&gt;Es recomendable ejecutar primero el binario &lt;code&gt;check_nrpe&lt;/code&gt; para depurar la configuración, y comprobar que la comunicación entre los hosts es correcta:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/usr/lib/nagios/plugins/check_nrpe -H 192.168.60.11 -c check_users
USERS OK - 1 users currently logged in |users=1;5;10;0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Una vez se ha comprobado que la comunicación entre la máquina de salto y los hosts es correcta, se añadirá un nuevo test &lt;em&gt;dummy&lt;/em&gt; llamado &lt;code&gt;check_remote_check&lt;/code&gt; en el servidor NRPE de la máquina de salto. La misión de este test es ordenar la ejecución de un test en un host remoto y recoger el resultado. Este nuevo test se definirá al igual que antes en el archivo  &lt;code&gt;/etc/nagios/nrpe.cfg&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;command[check_remote_check]=/usr/lib/nagios/plugins/check_nrpe -H $ARG1$ -c $ARG2$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Este test toma dos parámetros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ARG1$&lt;/code&gt; es el host remoto.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ARG2$&lt;/code&gt; es el test que se desea ejecutar.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En Ubuntu, el servidor NRPE no permite por defecto el paso de parámetros a los tests porque es un riesgo de seguridad. Para habilitar esta funcionalidad se debe modificar el fichero &lt;code&gt;/etc/nagios/nrpe.cfg&lt;/code&gt; y habilitar la opción &lt;code&gt;dont_blame_nrpe&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dont_blame_nrpe=1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Una alternativa a habilitar los parámetros sería que en lugar de crear un comando genérico como &lt;code&gt;check_remote_check&lt;/code&gt;, añadir comandos específicos para cada host como:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;command[check_remote_users_host1]=/usr/lib/nagios/plugins/check_nrpe -H 192.168.60.11 -c check_users
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Aunque posiblemente más segura, esta aproximación tiene la desventaja de que habría que crear un comando para cada uno de los tests de cada uno de los hosts que se quisieran monitorizar.&lt;/p&gt;
&lt;p&gt;Al igual que en el caso anterior, es aconsejable configurar la variable &lt;code&gt;allowed_hosts&lt;/code&gt; para que sólo figure la IP del servidor Nagios. &lt;/p&gt;
&lt;p&gt;No hay que olvidar reiniciar el servicio &lt;code&gt;nagios-nrpe-server&lt;/code&gt; después de modificar la configuración:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo service nagios-nrpe-server restart
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Configuración servidor Nagios&lt;/h4&gt;
&lt;p&gt;Además de Nagios, en el servidor se debe instalar el plugin NRPE:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install nagios-nrpe-plugin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si la configuración de la máquina de salto y de los hosts es correcta, el binario &lt;code&gt;check_nrpe&lt;/code&gt; debería poder ejecutar el test &lt;code&gt;check_remote_check&lt;/code&gt; en la máquina de salto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/usr/lib/nagios/plugins/check_nrpe -H 192.168.50.5 -c check_remote_check -a 192.168.60.11 check_users
USERS OK - 1 users currently logged in |users=1;5;10;0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Por ejemplo, se pueden definir un conjunto de test que usen &lt;code&gt;check_remote_check&lt;/code&gt; de la máquina de salto de la siguiente manera:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;define host {
    use                 generic-host
    host_name           jumpbox
    alias               JumpBox
    address             192.168.50.5
}

define service {
    use                 generic-service
    host_name           jumpbox
    service_description JumpBox_PING
    check_command       check_ping!100.0,20%!500.0,60%
}

define service {
    use                 generic-service
    host_name           jumpbox
    service_description host1_System_Load_With_Params
    check_command       check_nrpe_3args!check_remote_check!192.168.60.11!check_load
}

define service {
    use                 generic-service
    host_name           jumpbox
    service_description host1_System_Load_Without_Params
    check_command       check_nrpe_1arg!check_remote_load_host1
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hay que prestar atención a los siguientes detalles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sólo se define el como &lt;em&gt;host&lt;/em&gt; la máquina de salto. No es necesario definir el resto de hosts porque no son accesibles desde Nagios, y sus tests se van a realizar indirectamente a través de la máquina de salto.&lt;/li&gt;
&lt;li&gt;El test &lt;em&gt;host1_System_Load_With_Params&lt;/em&gt; utiliza el comando &lt;code&gt;check_remote_check&lt;/code&gt; que hemos definido anteriormente en la máquina de salto.&lt;/li&gt;
&lt;li&gt;El test &lt;em&gt;host1_System_Load_Without_Params&lt;/em&gt; utiliza el comando &lt;code&gt;check_remote_load_host1&lt;/code&gt; para ejecutar un test sin que haya un paso de parámetros del Nagios a la máquina de salto.&lt;/li&gt;
&lt;li&gt;Se utilizan los comandos &lt;code&gt;check_nrpe_1arg&lt;/code&gt; y &lt;code&gt;check_nrpe_3args&lt;/code&gt; que respectivan invocan a &lt;code&gt;check_nrpe&lt;/code&gt; tomando uno y tres argumentos.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A diferencia de la distribución estándar de Nagios, Ubuntu (o mas bien Debian) fragmenta la definición de los comandos en múltiples ficheros que se encuentran en &lt;code&gt;/etc/nagios-plugins/config/&lt;/code&gt;. En el caso de NRPE, utiliza el archivo &lt;code&gt;check_nrpe.cfg&lt;/code&gt;. En mi caso tuve que añadir la definición del comando &lt;code&gt;check_nrpe_3args&lt;/code&gt; para invocar a &lt;code&gt;check_nrpe&lt;/code&gt; con 3 argumentos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# this command runs a program $ARG1$ with arguments $ARG2$
define command {
    command_name    check_nrpe
    command_line    /usr/lib/nagios/plugins/check_nrpe -H $HOSTADDRESS$ -c $ARG1$ -a $ARG2$
}

# this command runs a program $ARG1$ with no arguments
define command {
    command_name    check_nrpe_1arg
    command_line    /usr/lib/nagios/plugins/check_nrpe -H $HOSTADDRESS$ -c $ARG1$
}

# this command runs a program $ARG1$ with arguments $ARG2$ and $ARG3$
define command {
    command_name    check_nrpe_3args
    command_line    /usr/lib/nagios/plugins/check_nrpe -H $HOSTADDRESS$ -c $ARG1$ -a $ARG2$ $ARG3$
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No hay que olvidar reiniciar el servicio &lt;code&gt;nagios3&lt;/code&gt; después de modificar la configuración:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo service nagios3 restart
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Problemas&lt;/h4&gt;
&lt;p&gt;El principal problema de esta aproximación es que para Nagios sólo existe un único host. Las posibilidades de filtrado son mucho más limitadas, y las alertas y los informes serán cada vez más complejos conforme la lista de hosts y de servicios vaya creciendo:&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/nagios_screenshot.png"&gt;&lt;img width="75%" src="/images/nagios_screenshot.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Otro problema que también es grave es que la monitorización de gran parte de la infraestructura depende exclusivamente de la máquina de salto. Como esta máquina se desconecte o se caiga nos llegarán miles de alertas, aún cuando el resto de la infraestructura esté operativa.&lt;/p&gt;
&lt;h3&gt;Conclusiones&lt;/h3&gt;
&lt;p&gt;Se ha presentado una posible solución para el problema de monitorizar una red privada desde un servidor Nagios que no tiene acceso directo a los elementos de red. No es la solución óptima porque se pierden algunas funcionalidades de Nagios como filtrar por host, informes más representativos de la infraestructura, etc., pero aún así hay situaciones en las que puede ser de utilidad este recurso.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Castellanos</dc:creator><pubDate>Fri, 27 Jun 2014 00:00:00 +0200</pubDate><guid>tag:www.pataliebre.net,2014-06-27:monitorizar-una-red-privada-desde-un-nagios-publico-con-nrpe.html</guid><category>nagios</category><category>firewall</category><category>ubuntu</category></item><item><title>Instalar py2exe en un virtualenv con Python 2.7</title><link>http://www.pataliebre.net/instalar-py2exe-en-un-virtualenv-con-python-27.html</link><description>&lt;p&gt;Para distribuir un programa Python en Windows la opción más sencilla suele ser empaquetar la aplicación en un único fichero binario, y que los usuarios ejecuten el fichero &lt;code&gt;.exe&lt;/code&gt; resultante. Existen varias alternativas para construir estos ficheros binarios, como p.e. &lt;a href="http://www.py2exe.org/"&gt;py2exe&lt;/a&gt; y &lt;a href="http://cx-freeze.sourceforge.net/"&gt;cx_freeze&lt;/a&gt;. Como parece que &lt;a href="https://www.google.es/#q=cx_freeze+virtualenv"&gt;cx_freeze no se integra bien con virtualenv&lt;/a&gt;, terminé eligiendo &lt;code&gt;py2exe&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;La forma más sencilla de instalar Python, &lt;code&gt;pip&lt;/code&gt; y &lt;code&gt;virtualenv&lt;/code&gt; en Windows es seguir las instrucciones de la sección &lt;a href="http://docs.python-guide.org/en/latest/starting/install/win/"&gt;Installing Python on Windows&lt;/a&gt; y &lt;a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/"&gt;Virtual Environments&lt;/a&gt; de &lt;a href="http://docs.python-guide.org"&gt;Python Guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Sin embargo, si usamos Python 2.7 no podemos instalar &lt;code&gt;py2exe&lt;/code&gt; con &lt;code&gt;pip&lt;/code&gt; debido a que la última versión (a día de hoy &lt;code&gt;0.9.2.0&lt;/code&gt;) de &lt;code&gt;py2exe&lt;/code&gt; sólo funciona con Python 3.3 o posterior. La versión &lt;code&gt;0.6.9&lt;/code&gt; es la última que funciona con Python 2.7, pero no podemos instalarla con &lt;code&gt;pip&lt;/code&gt; porque el enlace en &lt;a href="http://stackoverflow.com/questions/11288923/cannot-install-py2exe-with-python-2-7"&gt;PyPI&lt;/a&gt; es erróneo.&lt;/p&gt;
&lt;p&gt;La &lt;a href="https://pypi.python.org/pypi/py2exe/0.6.9"&gt;única solución&lt;/a&gt; es descargar el instalador &lt;code&gt;py2exe-0.6.9.win32-py2.7.exe&lt;/code&gt; que podemos encontrar en el &lt;a href="http://sourceforge.net/projects/py2exe/files/py2exe/0.6.9/"&gt;área de descargas&lt;/a&gt; del proyecto en SourceForge, y usar &lt;code&gt;easy_install&lt;/code&gt; para instalarlo dentro del &lt;code&gt;virtualenv&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;(env) c:\Users\dcastellanos\Documents\workspace\FooExample&amp;gt;easy_install C:\Users\dcastellanos\Downloads\py2exe-0.6.9.win32-py2.7.exe&lt;/span&gt;
&lt;span class="go"&gt;Processing py2exe-0.6.9.win32-py2.7.exe&lt;/span&gt;
&lt;span class="go"&gt;zipextimporter: module references __file__&lt;/span&gt;
&lt;span class="go"&gt;py2exe.boot_service: module references __file__&lt;/span&gt;
&lt;span class="go"&gt;py2exe.build_exe: module references __file__&lt;/span&gt;
&lt;span class="go"&gt;py2exe.build_exe: module references __path__&lt;/span&gt;
&lt;span class="go"&gt;py2exe.mf: module references __file__&lt;/span&gt;
&lt;span class="go"&gt;py2exe.mf: module references __path__&lt;/span&gt;
&lt;span class="go"&gt;py2exe.samples.pywin32.isapi.setup: module references __path__&lt;/span&gt;
&lt;span class="go"&gt;creating &amp;#39;c:\users\dcaste~1\appdata\local\temp\easy_install-qlkqlz\py2exe-0.6.9-py2.7-win32.egg&amp;#39; and adding &amp;#39;c:\users\dcaste~1\appdata\local\temp\easy_install-qlkqlz\py2exe-0.6.9-py2.7-win32.egg.tmp&amp;#39; to it&lt;/span&gt;
&lt;span class="go"&gt;creating c:\users\dcastellanos\documents\workspace\fooexample\env\lib\site-packages\py2exe-0.6.9-py2.7-win32.egg&lt;/span&gt;
&lt;span class="go"&gt;Extracting py2exe-0.6.9-py2.7-win32.egg to c:\users\dcastellanos\documents\workspace\fooexample\env\lib\site-packages&lt;/span&gt;
&lt;span class="go"&gt;Adding py2exe 0.6.9 to easy-install.pth file&lt;/span&gt;
&lt;span class="go"&gt;Installing py2exe_postinstall.py script to c:\Users\dcastellanos\Documents\workspace\FooExample\env\Scripts&lt;/span&gt;
&lt;span class="go"&gt;Installing py2exe_postinstall.pyc script to c:\Users\dcastellanos\Documents\workspace\FooExample\env\Scripts&lt;/span&gt;

&lt;span class="go"&gt;Installed c:\users\dcastellanos\documents\workspace\fooexample\env\lib\site-packages\py2exe-0.6.9-py2.7-win32.egg&lt;/span&gt;
&lt;span class="go"&gt;Processing dependencies for py2exe==0.6.9&lt;/span&gt;
&lt;span class="go"&gt;Finished processing dependencies for py2exe==0.6.9&lt;/span&gt;

&lt;span class="go"&gt;(env) c:\Users\dcastellanos\Documents\workspace\FooExample&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Una vez completada la instalación podemos seguir los pasos del &lt;a href="http://www.py2exe.org/index.cgi/Tutorial"&gt;tutorial de py2exe&lt;/a&gt;, u otro de los otros muchos (como &lt;a href="http://www.pythoncentral.io/py2exe-python-to-exe-introduction/"&gt;1&lt;/a&gt; y &lt;a href="http://yasoob.github.io/beta/using-py2exe-the-right-way"&gt;2&lt;/a&gt;) que podemos encontrar en Internet.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Castellanos</dc:creator><pubDate>Mon, 02 Jun 2014 00:00:00 +0200</pubDate><guid>tag:www.pataliebre.net,2014-06-02:instalar-py2exe-en-un-virtualenv-con-python-27.html</guid><category>python</category><category>pip</category><category>virtualenv</category><category>py2exe</category></item><item><title>Blog lowcost con GitHub y Pelican</title><link>http://www.pataliebre.net/blog-lowcost-con-github-y-pelican.html</link><description>&lt;!--
Status: draft
--&gt;

&lt;p&gt;Gracias a &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; y un generador estático de contenido como &lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; es muy fácil montar un blog &lt;em&gt;lowcost&lt;/em&gt;. Un humilde ejemplo es este blog, pero hasta hace poco no había conseguido una configuración que mereciera la pena compartir.&lt;/p&gt;
&lt;h3&gt;GitHub Pages&lt;/h3&gt;
&lt;p&gt;En general, el comportamiento de GitHub Pages es muy sencillo. Prácticamente consiste en crear un repositorio &lt;code&gt;git&lt;/code&gt;, realizar un commit con documentos HTML, y unos minutos después este contenido será accesible en una URL.&lt;/p&gt;
&lt;p&gt;GitHub Pages ofrece dos modalidades de servicio: páginas para desarrolladores u organizaciones, y páginas para proyectos. Dependiendo de la modalidad que estemos usando varía la forma en la que se monta el sitio:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;En la modalidad para desarrolladores u organizaciones, se debe crear un repositorio llamado &lt;em&gt;usuario&lt;/em&gt;.github.io, donde &lt;em&gt;usuario&lt;/em&gt; es el nombre del usuario o de la organización en GitHub. La página (o páginas) HTML que se deseen servir se deben añadir directamente en la rama &lt;code&gt;master&lt;/code&gt;, y no importa lo que haya en el resto de ramas. Este contenido es accesible desde la URL &lt;strong&gt;http://&lt;em&gt;usuario&lt;/em&gt;.github.io&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;En la modalidad para proyectos, no es necesario crear nuevos repositorios. En el repositorio del proyecto se debe crear una rama llamada &lt;code&gt;gh-pages&lt;/code&gt;, y añadir ahí el contenido HTML. Este contenido será accesible desde la URL &lt;strong&gt;http://&lt;em&gt;usuario&lt;/em&gt;.github.io/&lt;em&gt;repository&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aunque puede parecer un lío la gestión de estas ramas, afortunadamente existe una herramienta llamada &lt;a href="https://github.com/davisp/ghp-import/"&gt;ghp-import&lt;/a&gt; que facilita en gran manera estas operaciones.&lt;/p&gt;
&lt;h3&gt;Pelican&lt;/h3&gt;
&lt;p&gt;Pelican es un generador estático de contenido, al estilo de &lt;a href="http://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;. Por si fuera necesario, en &lt;a href="http://staticsitegenerators.net/"&gt;Static Site Generators&lt;/a&gt; hay una recopilación de proyectos similares.&lt;/p&gt;
&lt;p&gt;Además de la &lt;a href="http://docs.getpelican.com"&gt;documentación&lt;/a&gt; del proyecto, hay multitud de páginas con instrucciones para configurar Pelican (por ejemplo &lt;a href="http://www.circuidipity.com/github-pages.html"&gt;aquí&lt;/a&gt; y &lt;a href="http://mathamy.com/migrating-to-github-pages-using-pelican.html"&gt;aquí&lt;/a&gt;). Además el comando &lt;code&gt;pelican-quickstart&lt;/code&gt; es de ayuda para crear rápidamente una configuración básica de un blog.&lt;/p&gt;
&lt;h3&gt;Usar Pelican en GitHub Pages para desarrolladores&lt;/h3&gt;
&lt;p&gt;En mi caso, elegí utilizar GitHub Pages en su modalidad para desarrolladores. Para ello, hice lo siguiente:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Crear un repositorio llamado &lt;a href="https://github.com/davidcaste/davidcaste.github.io"&gt;davidcaste.github.io&lt;/a&gt;, y clonarlo en mi ordenador:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone https://github.com/davidcaste/davidcaste.github.io&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;En el repositorio local, crear una rama llamada &lt;code&gt;source&lt;/code&gt;, y cambiar a ella:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git checkout -b source&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Crear una configuración básica con &lt;code&gt;pelican-quickstart&lt;/code&gt; y seguir las instrucciones.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Llegados a este punto, contamos con una configuración Pelican funcional. La &lt;a href="http://docs.getpelican.com/en/3.3.0/getting_started.html#basic-usage"&gt;documentación de Pelican&lt;/a&gt; nos explica (entre otras muchas cosas) cómo crear contenidos y generar el contenido estático a partir de ellos.&lt;/p&gt;
&lt;p&gt;Según la configuración por defecto, las páginas generadas se almacenarán en el directorio &lt;code&gt;output&lt;/code&gt;. Este directorio &lt;strong&gt;no&lt;/strong&gt; es necesario añadirlo al repositorio, y lo ideal es añadir las siguientes líneas al fichero &lt;code&gt;.gitignore&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;output&lt;/span&gt;
&lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;
&lt;span class="n"&gt;srv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como se comentó anteriormente, GitHub Pages para desarrolladores va a servir el contenido HTML que se encuentre en la rama &lt;code&gt;master&lt;/code&gt; del repositorio. Podríamos copiar el contenido del directorio &lt;code&gt;ouput&lt;/code&gt; a algún sitio, cambiar a la rama &lt;code&gt;master&lt;/code&gt; y añadir el contenido anteriores. Es factible, pero sin duda que es un procedimiento muy tedioso.&lt;/p&gt;
&lt;p&gt;El script &lt;code&gt;ghp-import&lt;/code&gt; nos permite evitar los pasos anteriores. Con ejecutar &lt;code&gt;ghp-import -b master output&lt;/code&gt; él sólo va a realizar un commit en &lt;code&gt;master&lt;/code&gt; con los contenidos del directorio &lt;code&gt;output&lt;/code&gt;. Sólo nos quedaría subir los cambios de vuelta a GitHub con el comando &lt;code&gt;git push origin master&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;El proceso se puede automatizar aún más modificando el fichero &lt;code&gt;Makefile&lt;/code&gt; que genera &lt;code&gt;pelican-quickstart&lt;/code&gt;; en lugar de que el objetivo &lt;code&gt;github&lt;/code&gt; invoque a &lt;code&gt;ghp-import&lt;/code&gt; sobre la rama &lt;code&gt;gh-pages&lt;/code&gt;, nos interesa que se invoque sobre la rama &lt;code&gt;master&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;publish&lt;/span&gt;
    &lt;span class="n"&gt;ghp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OUTPUTDIR&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Conclusiones&lt;/h3&gt;
&lt;p&gt;La tupla GitHub Pages y un generador estático de contenido como Pelican permiten crear fácilmente páginas y blogs que requieren un esfuerzo de mantenimiento cercano a cero. Pelican en particular ofrece una serie de scripts y facilidades que automatizan las operaciones más tediosas.&lt;/p&gt;
&lt;p&gt;En definitiva, la posibilidad de poder usar las mismas herramientas que las usadas durante el desarrollo de software, hacen de GitHub Pages junto con Pelican ofrece una alternativa muy a tener en cuenta con respecto a otras plataformas de blogs tradicionales como &lt;a href="http://es.wordpress.com/"&gt;WordPress&lt;/a&gt; o &lt;a href="https://www.blogger.com"&gt;Blogger&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Castellanos</dc:creator><pubDate>Tue, 27 May 2014 00:00:00 +0200</pubDate><guid>tag:www.pataliebre.net,2014-05-27:blog-lowcost-con-github-y-pelican.html</guid><category>github</category><category>python</category><category>pelican</category></item><item><title>Solucionar cuelgue de Eclipse en Ubuntu 13.04 al mostrar una sugerencia de autocompletado</title><link>http://www.pataliebre.net/solucionar-cuelgue-de-eclipse-en-ubuntu-1304-al-mostrar-una-sugerencia-de-autocompletado.html</link><description>&lt;p&gt;Para lo bueno y para lo malo Eclipse no deja de sorprenderme, y la última
sorpresa no ha sido agradable. En Ubuntu 13.04 de 64 bits, Eclipse 4.2 se
cuelga justo después de mostrar cualquier sugerencia de autocompletado de
código.&lt;/p&gt;
&lt;p&gt;El error está reportado en Eclipse (&lt;a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=406736"&gt;#406763&lt;/a&gt;) y en Ubuntu
(&lt;a href="https://bugs.launchpad.net/ubuntu/+source/eclipse/+bug/988646"&gt;#988646&lt;/a&gt;), pero en ninguno de estos sitios se describe un &lt;em&gt;workarond&lt;/em&gt;.
Afortunadamente encontré una solución (para variar) en un artículo de
Stackoverflow titulado &lt;a href="http://stackoverflow.com/questions/16383992/why-does-my-eclipse-indigo-crashes-on-ubuntu-13-04-with-oracle-jdk-64bit"&gt;Why does my Eclipse Indigo crashes on Ubuntu 13.04 with
Oracle JDK 64bit?&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Este &lt;em&gt;workaround&lt;/em&gt; consiste simplemente en añadir al final del fichero
&lt;code&gt;eclipse.ini&lt;/code&gt; la siguiente línea:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;-Dorg.eclipse.swt.browser.DefaultType=mozilla
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Castellanos</dc:creator><pubDate>Tue, 21 May 2013 00:00:00 +0200</pubDate><guid>tag:www.pataliebre.net,2013-05-21:solucionar-cuelgue-de-eclipse-en-ubuntu-1304-al-mostrar-una-sugerencia-de-autocompletado.html</guid><category>eclipse</category><category>linux</category><category>ubuntu</category><category>wtf</category></item><item><title>Solucionar problemas gráficos en Eclipse bajo GNU/Linux</title><link>http://www.pataliebre.net/solucionar-problemas-graficos-en-eclipse-bajo-gnulinux.html</link><description>&lt;p&gt;Aunque &lt;a href="http://www.eclipse.org"&gt;Eclipse&lt;/a&gt; es una plataforma de desarrollo multiplataforma, no es un
secreto que MS Windows ha sido hasta ahora la plataforma mejor soportada.
La versión de Eclipse para Mac OS X ha ido mejorando versión a versión, sobre
todo desde la publicación de &lt;a href="http://www.eclipse.org/juno"&gt;Eclipse 4.2 (Juno)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Aunque completamente funcional, el soporte de Eclipse para GNU/Linux no está a
la altura quei en el resto de plataformas. Un ejemplo es el bug &lt;a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=368543"&gt;#368543&lt;/a&gt;,
en el que se describen problemas gráficos con &lt;a href="http://www.eclipse.org/windowbuilder/"&gt;WindowBuilder&lt;/a&gt; bajo
GNU/Linux. Estes mismos problemas los tiene el &lt;a href="https://twitter.com/vogella/"&gt;plugin ADT&lt;/a&gt; de Google (que
al fin y al cabo utiliza el mismo editor gráfico que WindowBuilder).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/vogella/"&gt;Lars Vogel&lt;/a&gt; propone un &lt;a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=368543#c17"&gt;workaround&lt;/a&gt; a este problema, que consiste en
forzar a SWT a no utilizar &lt;a href="http://cairographics.org/"&gt;Cairo&lt;/a&gt;. En mi caso, utilizo un script que
además desactiva las &lt;a href="https://launchpad.net/ayatana-scrollbar/"&gt;overlay scrollbars&lt;/a&gt; de Ubuntu, que tampoco parecen
terminar de funcionar bien en Eclipse:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;GDK_NATIVE_WINDOWS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;LIBOVERLAY_SCROLLBAR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0

&lt;span class="nv"&gt;ECLIPSE_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$( cd &amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt; dirname &lt;span class="s2"&gt;&amp;quot;${BASH_SOURCE[0]}&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;amp;&amp;amp; pwd )&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$ECLIPSE_DIR&lt;/span&gt;/eclipse -Dorg.eclipse.swt.internal.gtk.cairoGraphics&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -Dorg.eclipse.swt.internal.gtk.useCairo&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Castellanos</dc:creator><pubDate>Wed, 01 Aug 2012 00:00:00 +0200</pubDate><guid>tag:www.pataliebre.net,2012-08-01:solucionar-problemas-graficos-en-eclipse-bajo-gnulinux.html</guid><category>eclipse</category><category>linux</category><category>windowbuilder</category><category>android</category></item><item><title>(Otra) expresión regular para extraer URLs</title><link>http://www.pataliebre.net/otra-expresion-regular-para-extraer-urls.html</link><description>&lt;p&gt;Escribir una expresión regular que extraiga URLs de un texto arbitrario no es
una tarea sencilla, la prueba es que existen en Internet literalmente cientos
de aproximaciones que abordan el problema con más o menos éxito.&lt;/p&gt;
&lt;p&gt;Hay que tener en cuenta que &lt;a href="http://www.codinghorror.com/blog/2008/10/the-problem-with-urls.html"&gt;no es posible detectar &lt;em&gt;cualquier&lt;/em&gt;
URL en un texto arbitrario&lt;/a&gt;, puesto que el espacio es un carácter admitido en
las URLs. Después de dedicar bastante tiempo a buscar en Internet, la
aproximación que más me gustó es la realizada por &lt;a href="http://daringfireball.net/"&gt;John Gruber&lt;/a&gt;, creador de
&lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt;, en el artículo &lt;a href="http://daringfireball.net/2010/07/improved_regex_for_matching_urls"&gt;An Improved Liberal, Accurate Regex Pattern for
Matching URLs&lt;/a&gt;. Propone  una expresión regular muy interesante porque aborda
el problema de URLs con parejas de paréntesis, común en ciertos sitios como la
Wikipedia.  Aunque su expresión regular reconoce correctamente la inmensa
mayoría de URLs,
requiere que después del dominio superior (&lt;em&gt;Top Level Domain&lt;/em&gt;, o &lt;abbr title="Top Level Domain"&gt;TLD&lt;/abbr&gt;) de la URL
tenga una barra invertida después del dominio. Por ejemplo
&lt;a href="http://t.co/"&gt;t.co/&lt;/a&gt; se reconoce correctamente, pero &lt;a href="http://t.co"&gt;t.co&lt;/a&gt; no.&lt;/p&gt;
&lt;p&gt;Afortunadamente Jesús González (Chuso), un compañero de Escritorio Movistar
para la plataforma Windows, había tenido el mismo problema y había escrito una
expresión regular que no tiene este problema:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# Capture entire matched URL
(
    # Optional: only allow some network protocols
    # URL protocol and a colon followed by 2 slashes
    (?:
        (?:
            http|https|ftp
        ):\\/\\/
    )?

    # Check if it is the beginning of a word
    (?&amp;lt;=\\b)

    # The URL must not start with the character &amp;#39;@&amp;#39;
    (?&amp;lt;!\\@)

    # The domain name must begin with a valid character
    (?:[\w\d]

        # Other characters allowed in the domain
        (?:[\w\dñÑ()+,-.:=;$_!*&amp;#39;%?#])*
    )

    # A recognized domain is required
    \\.
    (?:
        aero|arpa|asia|biz|cat|com|coop|edu|gov|inet|info|int|jobs|mil|
        mobi|museum|name|net|org|pro|tel|travel|xxx|ac|ad|ae|af|ag|ai|
        al|am|an|ao|aq|ar|as|at|au|aw|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|
        bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cu|
        cv|cx|cy|cz|de|dj|dk|dm|do|dz|ec|ee|eg|er|es|et|eu|fi|fj|fk|fm|fo|
        fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|
        hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|
        km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|
        mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|
        ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|
        py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|
        st|su|sv|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|
        ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|za|zm|zw
    )

    # Optional: Port number
    (?::[0-9]+)?

    # Characters allowed in a URL according to RF1738
    (?:
        \\/[\w\d()+,-.:=@;$_!*&amp;#39;%?#&amp;amp;|\\\\]*
    )*

    # Check if we have consumed all characters allowed in a URL
    (?![\w\d()+,-./:=@;$_!*&amp;#39;%?#&amp;amp;|\\\\])
)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esta expresión debe compilarse con los flags &lt;code&gt;re.IGNORECASE&lt;/code&gt; y &lt;code&gt;re.VERBOSE&lt;/code&gt; del
&lt;a href="http://docs.python.org/library/re.html"&gt;módulo re&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Además de detectar las URLs cortas del tipo &lt;a href="t.co"&gt;t.co&lt;/a&gt;, sólo hace
&lt;em&gt;matching&lt;/em&gt; si el &lt;abbr title="Top Level Domain"&gt;TLD&lt;/abbr&gt; de la URL es válido. Sin embargo, tiene la desventaja de
que si en un futuro cambiara la &lt;a href="http://en.wikipedia.org/wiki/List_of_Internet_top-level_domains"&gt;lista de dominios superiores&lt;/a&gt;, sería
necesario actualizar la expresión regular.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Castellanos</dc:creator><pubDate>Mon, 18 Jun 2012 00:00:00 +0200</pubDate><guid>tag:www.pataliebre.net,2012-06-18:otra-expresion-regular-para-extraer-urls.html</guid><category>regex</category><category>web</category><category>python</category></item><item><title>Control de concurrencia usando D-Bus</title><link>http://www.pataliebre.net/control-de-concurrencia-usando-d-bus.html</link><description>&lt;p&gt;Un problema frecuente es cómo impedir que un programa se ejecute dos o más
veces de forma concurrente. Uno de los mecanismos más utilizados para afrontar
este problema es el conocido como &lt;a href="http://en.wikipedia.org/wiki/File_locking"&gt;file locking&lt;/a&gt;. En un proyecto hemos
utilizado &lt;a href="http://en.wikipedia.org/wiki/DBus"&gt;D-Bus&lt;/a&gt; para implementar un mecanismo similar.&lt;/p&gt;
&lt;p&gt;D-Bus es un sistema de bus de mensajes, una forma sencilla para que las
aplicaciones se comuniquen entre sí. De forma muy resumida (más información en
la web del &lt;a href="http://www.freedesktop.org/wiki/Software/dbus"&gt;proyecto D-Bus&lt;/a&gt;), cuando un usuario inicia una sesión gráfica en
el sistema tiene a su disposición un bus del sistema y un bus del usuario
ligado a su sesión. Un programa en ejecución se puede registrar en uno de estos
buses para ofrecer uno o más servicios, identificados unívocamente con un
identificador asignado por D-Bus (p.e. &lt;code&gt;:34-907&lt;/code&gt;) y un nombre &lt;em&gt;conocido&lt;/em&gt;
elegido por el programa (p.e. &lt;code&gt;es.foo.Bar&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Puesto que sólo puede haber un único servicio en un bus con el mismo nombre, es
sencillo idear un mecanismo de control de concurrencia. Consistiría básicamente
en consultar si existe un servicio en el bus de sesión con un determinado
nombre. Un ejemplo sencillo implementado en Python es el siguiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# dbus-singleton-example.py&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;gobject&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dbus&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dbus.mainloop.glib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dbus.service&lt;/span&gt;

&lt;span class="n"&gt;BUS_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;es.foo.Bar&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DBusSingleton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dbus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;bus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dbus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SessionBus&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;bus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name_has_owner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BUS_NAME&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;bus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BUS_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;dbus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/es/foo/bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Adquired D-Bus name: &amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;BUS_NAME&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Failed to request D-Bus name: &amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;BUS_NAME&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;dbus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mainloop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DBusGMainLoop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;set_as_default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;singleton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DBusSingleton&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gobject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MainLoop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Al ejecutarlo de forma concurrente &lt;em&gt;n&lt;/em&gt; veces se obtiene la salida:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="k"&gt;for &lt;/span&gt;i in &lt;span class="o"&gt;{&lt;/span&gt;1..5&lt;span class="o"&gt;}&lt;/span&gt;; &lt;span class="k"&gt;do &lt;/span&gt;python dbus-concurrenty-example.py &amp;amp; &lt;span class="k"&gt;done&lt;/span&gt;
Adquired D-Bus name: &lt;span class="s2"&gt;&amp;quot;es.foo.Bar&amp;quot;&lt;/span&gt;
Failed to request D-Bus name: &lt;span class="s2"&gt;&amp;quot;es.foo.Bar&amp;quot;&lt;/span&gt;
Failed to request D-Bus name: &lt;span class="s2"&gt;&amp;quot;es.foo.Bar&amp;quot;&lt;/span&gt;
Failed to request D-Bus name: &lt;span class="s2"&gt;&amp;quot;es.foo.Bar&amp;quot;&lt;/span&gt;
Failed to request D-Bus name: &lt;span class="s2"&gt;&amp;quot;es.foo.Bar&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Castellanos</dc:creator><pubDate>Fri, 04 May 2012 00:00:00 +0200</pubDate><guid>tag:www.pataliebre.net,2012-05-04:control-de-concurrencia-usando-d-bus.html</guid><category>python</category><category>dbus</category><category>concurrencia</category></item><item><title>Oracle JDK y Google Chrome en Ubuntu 12.04 LTS</title><link>http://www.pataliebre.net/oracle-jdk-y-google-chrome-en-ubuntu-1204-lts.html</link><description>&lt;p&gt;A menudo utilizo &lt;em&gt;Juniper Network Connect&lt;/em&gt; para conectar a la intranet
corporativa del trabajo. Es un applet de Java que, al menos en mi caso, no
funciona bien con &lt;a href="http://openjdk.java.net"&gt;OpenJDK&lt;/a&gt; y sólo funciona con &lt;a href="http://www.java.com"&gt;Oracle JVM&lt;/a&gt; (la
anteriormente conocida como Sun JVM). En agosto del 2011, &lt;a href="https://lists.ubuntu.com/archives/ubuntu-security-announce/2011-December/001528.html"&gt;Canonical dejó de
tener permiso para distribuir la JVM de Sun&lt;/a&gt;. Aunque existen algunos PPAs
mantenidos por miembros de la comunidad de Ubuntu que ofrecen paquetes DEB del
Oracle JVM, suelen ser versiones demasiado antiguas y con problemas de
seguridad.&lt;/p&gt;
&lt;p&gt;Aunque hay disponible un instalador oficial en la &lt;a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html"&gt;sección de descargas de
Oracle para Java&lt;/a&gt;, suele ser mejor opción utilizar el script &lt;code&gt;make-jpkg&lt;/code&gt;
para crear un paquete Debian. Este script está empaquetado para Debian en el
paquete &lt;a href="http://packages.debian.org/java-package"&gt;java-package&lt;/a&gt;, y recientemente ha sido actualizado a la versión
0.50 que tiene como novedad el soporte para Java 7.&lt;/p&gt;
&lt;p&gt;Sólo he encontrado un problema con estos paquetes, y es que no instalan el
plugin de Java en el navegador Google Chrome, sin embargo si lo hace para
Iceweasel y Chromium. Es problema es muy sencillo de resolver, sólo es
necesario crear un enlace simbólico al fichero &lt;code&gt;libnpjp2.so&lt;/code&gt; que se encuentra
en el JRE. Utilizando el &lt;a href="http://www.debian-administration.org/articles/91"&gt;sistema de alternatives de Debian&lt;/a&gt; se haría de la
siguiente manera:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo update-alternatives --install \
&amp;gt; /usr/lib/mozilla/plugins/libjavaplugin.so \
&amp;gt; mozilla-javaplugin.so \
&amp;gt; /usr/lib/jvm/j2sdk1.6-oracle/jre/lib/i386/libnpjp2.so 100
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Castellanos</dc:creator><pubDate>Mon, 30 Apr 2012 00:00:00 +0200</pubDate><guid>tag:www.pataliebre.net,2012-04-30:oracle-jdk-y-google-chrome-en-ubuntu-1204-lts.html</guid><category>java</category><category>ubuntu</category><category>alternatives</category></item><item><title>Extraer cadenas de un fichero .ui de gtk-builder con intltool</title><link>http://www.pataliebre.net/extraer-cadenas-de-un-fichero-ui-de-gtk-builder-con-intltool.html</link><description>&lt;p&gt;Tenemos entre manos un proyecto en el que utilizamos Glade para la creación de
la interfaz de usuario; es muy cómodo porque crea una serie de ficheros XML que
describen la UI del programa, en lugar de crearla programáticamente. Hasta ahora
usábamos &lt;code&gt;libglade&lt;/code&gt; para cargar estos ficheros, pero como esta librería &lt;a href="http://mail.gnome.org/archives/devel-announce-list/2009-May/msg00003.html"&gt;está
deprecada desde el año 2009&lt;/a&gt;, estamos trabajando en reemplazarla con
&lt;code&gt;gtk-builder&lt;/code&gt; del proyecto GTK.&lt;/p&gt;
&lt;p&gt;Es un proceso aburrido y tedioso más que difícil, pero nos hemos encontrado con
un pequeño problema. Estamos usando Autotools en el proyecto, e &lt;code&gt;intltool&lt;/code&gt; no
es capaz de extraer cadenas de los ficheros con extensión &lt;code&gt;.ui&lt;/code&gt; de
&lt;code&gt;gtk-builder&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;La solución para este problema es sencilla y la encontramos en un documento
llamado &lt;a href="http://live.gnome.org/GnomeGoals/RemoveLibGladeUseGtkBuilder"&gt;GNOME Goal: Use GtkBuilder instead of libglade&lt;/a&gt;. Consiste en
indicar a &lt;code&gt;intltool&lt;/code&gt; que estos ficheros son de tipo &lt;code&gt;gettext/glade&lt;/code&gt;. Basta con
editar el fichero &lt;code&gt;POTFILES.in&lt;/code&gt; y añadir un prefijo a cada una de las líneas
donde aparezca un fichero &lt;code&gt;.ui&lt;/code&gt; de la siguiente manera:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;[type: gettext/glade]data/preferences.ui
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Castellanos</dc:creator><pubDate>Thu, 26 Apr 2012 00:00:00 +0200</pubDate><guid>tag:www.pataliebre.net,2012-04-26:extraer-cadenas-de-un-fichero-ui-de-gtk-builder-con-intltool.html</guid><category>gtk</category><category>autotools</category><category>intltool</category></item><item><title>hello world!</title><link>http://www.pataliebre.net/hello-world.html</link><description>&lt;p&gt;Quizá sea por deformación profesional, vaguería, o una falta (puntual) de
imaginación, no se me ocurre una mejor forma de comenzar este lío que con un
estupendo &lt;em&gt;Hello World!&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;El objetivo de este blog es muy humilde: continuamente estoy aprendiendo cosas,
y continuamente estoy olvidando cosas. Y como soy vago, me fastidia sobremanera
tener que volver a aprenderlas. Normalmente cuando me quejo de todo esto me
suelen regañar con un  "deberías haberlo apuntado en algún sitio".&lt;/p&gt;
&lt;p&gt;Así que ya
tengo la motivación que necesitaba: voy a escribir sobre cosas de mi trabajo
que &lt;em&gt;sé&lt;/em&gt; que voy a olvidar y que muy posiblemente vaya a necesitar en un
futuro. Y si de paso resulta que es útil a alguien, perfecto. Imagino que la
mayoría de las entradas de este blog serán sobre computación y
programación en general, y sobre Python en particular. Entre mis intereses se
encuentran temas como el toolkit GTK, Eclipse (tanto el IDE como la
plataforma), Java, Android, Git, etc.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Castellanos</dc:creator><pubDate>Sun, 22 Apr 2012 00:00:00 +0200</pubDate><guid>tag:www.pataliebre.net,2012-04-22:hello-world.html</guid><category>me</category></item></channel></rss>